// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/basic/v1/common.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on PageArg with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *PageArg) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetOffset() != 0 {

		if m.GetOffset() < 0 {
			return PageArgValidationError{
				field:  "Offset",
				reason: "value must be greater than or equal to 0",
			}
		}

	}

	if m.GetLimit() != 0 {

		if m.GetLimit() <= 0 {
			return PageArgValidationError{
				field:  "Limit",
				reason: "value must be greater than 0",
			}
		}

	}

	if m.GetPageNo() != 0 {

		if m.GetPageNo() < 0 {
			return PageArgValidationError{
				field:  "PageNo",
				reason: "value must be greater than or equal to 0",
			}
		}

	}

	if m.GetPageSize() != 0 {

		if m.GetPageSize() <= 0 {
			return PageArgValidationError{
				field:  "PageSize",
				reason: "value must be greater than 0",
			}
		}

	}

	// no validation rules for OrderBy

	if m.GetOrderType() != "" {

		if _, ok := _PageArg_OrderType_InLookup[m.GetOrderType()]; !ok {
			return PageArgValidationError{
				field:  "OrderType",
				reason: "value must be in list [asc desc]",
			}
		}

	}

	return nil
}

// PageArgValidationError is the validation error returned by PageArg.Validate
// if the designated constraints aren't met.
type PageArgValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PageArgValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PageArgValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PageArgValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PageArgValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PageArgValidationError) ErrorName() string { return "PageArgValidationError" }

// Error satisfies the builtin error interface
func (e PageArgValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPageArg.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PageArgValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PageArgValidationError{}

var _PageArg_OrderType_InLookup = map[string]struct{}{
	"asc":  {},
	"desc": {},
}

// Validate checks the field values on PageArgSize with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *PageArgSize) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetPageNo() != 0 {

		if m.GetPageNo() < 0 {
			return PageArgSizeValidationError{
				field:  "PageNo",
				reason: "value must be greater than or equal to 0",
			}
		}

	}

	if m.GetPageSize() != 0 {

		if m.GetPageSize() <= 0 {
			return PageArgSizeValidationError{
				field:  "PageSize",
				reason: "value must be greater than 0",
			}
		}

	}

	// no validation rules for OrderBy

	if m.GetOrderType() != "" {

		if _, ok := _PageArgSize_OrderType_InLookup[m.GetOrderType()]; !ok {
			return PageArgSizeValidationError{
				field:  "OrderType",
				reason: "value must be in list [asc desc]",
			}
		}

	}

	return nil
}

// PageArgSizeValidationError is the validation error returned by
// PageArgSize.Validate if the designated constraints aren't met.
type PageArgSizeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PageArgSizeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PageArgSizeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PageArgSizeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PageArgSizeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PageArgSizeValidationError) ErrorName() string { return "PageArgSizeValidationError" }

// Error satisfies the builtin error interface
func (e PageArgSizeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPageArgSize.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PageArgSizeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PageArgSizeValidationError{}

var _PageArgSize_OrderType_InLookup = map[string]struct{}{
	"asc":  {},
	"desc": {},
}

// Validate checks the field values on CreatedAtInfo with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *CreatedAtInfo) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreatedAtInfoValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for CreatedBy

	return nil
}

// CreatedAtInfoValidationError is the validation error returned by
// CreatedAtInfo.Validate if the designated constraints aren't met.
type CreatedAtInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatedAtInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatedAtInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatedAtInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatedAtInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatedAtInfoValidationError) ErrorName() string { return "CreatedAtInfoValidationError" }

// Error satisfies the builtin error interface
func (e CreatedAtInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatedAtInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatedAtInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatedAtInfoValidationError{}

// Validate checks the field values on CreatedByNameInfo with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *CreatedByNameInfo) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for CreatedByName

	return nil
}

// CreatedByNameInfoValidationError is the validation error returned by
// CreatedByNameInfo.Validate if the designated constraints aren't met.
type CreatedByNameInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatedByNameInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatedByNameInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatedByNameInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatedByNameInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatedByNameInfoValidationError) ErrorName() string {
	return "CreatedByNameInfoValidationError"
}

// Error satisfies the builtin error interface
func (e CreatedByNameInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatedByNameInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatedByNameInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatedByNameInfoValidationError{}

// Validate checks the field values on UpdatedAtInfo with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *UpdatedAtInfo) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdatedAtInfoValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for UpdatedBy

	return nil
}

// UpdatedAtInfoValidationError is the validation error returned by
// UpdatedAtInfo.Validate if the designated constraints aren't met.
type UpdatedAtInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatedAtInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatedAtInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatedAtInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatedAtInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatedAtInfoValidationError) ErrorName() string { return "UpdatedAtInfoValidationError" }

// Error satisfies the builtin error interface
func (e UpdatedAtInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatedAtInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatedAtInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatedAtInfoValidationError{}

// Validate checks the field values on UpdatedByNameInfo with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *UpdatedByNameInfo) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for UpdatedByName

	return nil
}

// UpdatedByNameInfoValidationError is the validation error returned by
// UpdatedByNameInfo.Validate if the designated constraints aren't met.
type UpdatedByNameInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatedByNameInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatedByNameInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatedByNameInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatedByNameInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatedByNameInfoValidationError) ErrorName() string {
	return "UpdatedByNameInfoValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatedByNameInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatedByNameInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatedByNameInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatedByNameInfoValidationError{}

// Validate checks the field values on DeletedAtInfo with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *DeletedAtInfo) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDeletedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeletedAtInfoValidationError{
				field:  "DeletedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for DeletedBy

	return nil
}

// DeletedAtInfoValidationError is the validation error returned by
// DeletedAtInfo.Validate if the designated constraints aren't met.
type DeletedAtInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeletedAtInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeletedAtInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeletedAtInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeletedAtInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeletedAtInfoValidationError) ErrorName() string { return "DeletedAtInfoValidationError" }

// Error satisfies the builtin error interface
func (e DeletedAtInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeletedAtInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeletedAtInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeletedAtInfoValidationError{}

// Validate checks the field values on DeletedByNameInfo with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *DeletedByNameInfo) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for DeletedByName

	return nil
}

// DeletedByNameInfoValidationError is the validation error returned by
// DeletedByNameInfo.Validate if the designated constraints aren't met.
type DeletedByNameInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeletedByNameInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeletedByNameInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeletedByNameInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeletedByNameInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeletedByNameInfoValidationError) ErrorName() string {
	return "DeletedByNameInfoValidationError"
}

// Error satisfies the builtin error interface
func (e DeletedByNameInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeletedByNameInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeletedByNameInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeletedByNameInfoValidationError{}
