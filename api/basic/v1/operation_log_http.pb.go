// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.5.0
// - protoc             v3.21.12
// source: api/basic/v1/operation_log.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationOperationLogAdd = "/api.basic.v1.OperationLog/Add"
const OperationOperationLogListOperationLog = "/api.basic.v1.OperationLog/ListOperationLog"
const OperationOperationLogListOperationLogUser = "/api.basic.v1.OperationLog/ListOperationLogUser"

type OperationLogHTTPServer interface {
	Add(context.Context, *AddRequest) (*AddReply, error)
	ListOperationLog(context.Context, *ListOperationLogRequest) (*ListOperationLogReply, error)
	ListOperationLogUser(context.Context, *ListOperationLogUserRequest) (*ListOperationLogUserReply, error)
}

func RegisterOperationLogHTTPServer(s *http.Server, srv OperationLogHTTPServer) {
	r := s.Route("/")
	r.POST("/api/v1/operation-log", _OperationLog_Add0_HTTP_Handler(srv))
	r.GET("/api/v1/operation-log", _OperationLog_ListOperationLog0_HTTP_Handler(srv))
	r.GET("/api/v1/operation-log/user", _OperationLog_ListOperationLogUser0_HTTP_Handler(srv))
}

func _OperationLog_Add0_HTTP_Handler(srv OperationLogHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AddRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationOperationLogAdd)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Add(ctx, req.(*AddRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AddReply)
		return ctx.Result(200, reply)
	}
}

func _OperationLog_ListOperationLog0_HTTP_Handler(srv OperationLogHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListOperationLogRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationOperationLogListOperationLog)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListOperationLog(ctx, req.(*ListOperationLogRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListOperationLogReply)
		return ctx.Result(200, reply)
	}
}

func _OperationLog_ListOperationLogUser0_HTTP_Handler(srv OperationLogHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListOperationLogUserRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationOperationLogListOperationLogUser)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListOperationLogUser(ctx, req.(*ListOperationLogUserRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListOperationLogUserReply)
		return ctx.Result(200, reply)
	}
}

type OperationLogHTTPClient interface {
	Add(ctx context.Context, req *AddRequest, opts ...http.CallOption) (rsp *AddReply, err error)
	ListOperationLog(ctx context.Context, req *ListOperationLogRequest, opts ...http.CallOption) (rsp *ListOperationLogReply, err error)
	ListOperationLogUser(ctx context.Context, req *ListOperationLogUserRequest, opts ...http.CallOption) (rsp *ListOperationLogUserReply, err error)
}

type OperationLogHTTPClientImpl struct {
	cc *http.Client
}

func NewOperationLogHTTPClient(client *http.Client) OperationLogHTTPClient {
	return &OperationLogHTTPClientImpl{client}
}

func (c *OperationLogHTTPClientImpl) Add(ctx context.Context, in *AddRequest, opts ...http.CallOption) (*AddReply, error) {
	var out AddReply
	pattern := "/api/v1/operation-log"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationOperationLogAdd))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *OperationLogHTTPClientImpl) ListOperationLog(ctx context.Context, in *ListOperationLogRequest, opts ...http.CallOption) (*ListOperationLogReply, error) {
	var out ListOperationLogReply
	pattern := "/api/v1/operation-log"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationOperationLogListOperationLog))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *OperationLogHTTPClientImpl) ListOperationLogUser(ctx context.Context, in *ListOperationLogUserRequest, opts ...http.CallOption) (*ListOperationLogUserReply, error) {
	var out ListOperationLogUserReply
	pattern := "/api/v1/operation-log/user"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationOperationLogListOperationLogUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
